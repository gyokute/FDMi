name: Build Release

on:
  workflow_dispatch:

jobs:
  # Validate Repository Configuration
  config:
    runs-on: ubuntu-latest
    outputs:
      config_package: ${{ steps.config_package.outputs.configPackage }}
    steps:
      # Ensure that required repository variable has been created for the Package
      - name: Validate Package Config
        id: config_package
        run: |
          if [ "${{ vars.PACKAGE_NAME }}" != "" ]; then
            echo "configPackage=true" >> $GITHUB_OUTPUT;
          else
            echo "configPackage=false" >> $GITHUB_OUTPUT;
          fi
  # Build and release the Package
  # If the repository is not configured properly, this job will be skipped
  build:
    needs: config
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      packagePath: Packages/${{ vars.PACKAGE_NAME }}
    if: needs.config.outputs.config_package == 'true'
    steps:
      # Checkout Local Repository
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      # Get the Package version based on the package.json file
      - name: Get Version
        id: version
        uses: zoexx/github-action-json-file-properties@d02f28167f05bf70cd75352b11c25a4e8c39bf38
        with:
          file_path: "${{ env.packagePath }}/package.json"
          prop_path: "version"

      # Configure the Environment Variables needed for releasing the Package
      - name: Set Environment Variables
        run: |
          echo "zipFile=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}".zip >> $GITHUB_ENV
          echo "unityPackage=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
          echo "version=${{ steps.version.outputs.value }}" >> $GITHUB_ENV
      # Zip the Package for release
      - name: Create Package Zip
        id: make_zip
        run: |
          find ${{ github.workspace }}/Packages -name 'package.json'|xargs dirname|awk -F "/" '{ printf "cd %s; zip -rq %s-${{ steps.version.outputs.value }}.zip *\n", $0, $NF }'|xargs -i sh -c "{}"
          find . -name '*.zip'| xargs -i mv {} .
          find . -name '*.zip'|xargs -L 1 basename|xargs -i echo "${{ env.packagePath }}/{}" |tr '\n' ','| jq -c -R 'split(",")'|xargs -i echo files={} >> $GITHUB_OUTPUT
      
      - name: Check Package Zip
        run:  echo ${{steps.make_zip.outputs.files}}

      # create "Packgage.json" list
      - name: Create package.json list
        id: make_package_json
        run: |
          find ./Packages -name 'package.json'|xargs dirname|xargs -I insert jq -c '{ (.name):{versions:{(.version):.}}}' insert/package.json  | jq --slurp 'add' | jq '{packages:.}' > package.json
      
      # Build a list of .meta files for future use
      # - name: Track Package Meta Files
      # run: find "${{ env.packagePath }}/" -name \*.meta >> metaList

      # Make a UnityPackage version of the Package for release
      #- name: Create UnityPackage
      #  uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
      #  with:
      #    package-path: ${{ env.unityPackage }}
      #    include-files: metaList

      # Make a release tag of the version from the package.json file
      - name: Create Tag
        id: tag_version
        uses: rickstaa/action-create-tag@a1c7777fcb2fee4f19b0f283ba888afa11678b72
        with:
          tag: "${{ env.version }}"

      # Publish the Release to GitHub
      - name: Make Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          files: |
            *.zip
            package.json
          tag_name: ${{ env.version }}
